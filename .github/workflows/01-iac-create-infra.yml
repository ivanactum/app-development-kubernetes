name: IaC - Create AKS Cluster - Azure

on:
  workflow_dispatch:
    
jobs:
  create-aks-cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
# https://github.com/marketplace/actions/azure-cli-action

      - name: 'Run az commands'
        shell: pwsh
        run: |
          az aks create --resource-group ivan-test --name myAKSCluster --node-count 2 --generate-ssh-keys


      # # Use kubelogin to configure your kubeconfig for Azure auth
      # - name: Set up kubelogin for non-interactive login
      #   uses: azure/use-kubelogin@v1
      #   with:
      #     kubelogin-version: 'v0.0.25'

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'ivan-test' 
          cluster-name: 'myAKSCluster'
          # admin: 'false'
          # use-kubelogin: 'true'


      - uses: Azure/k8s-deploy@v4
        with:
          #  action: deploy
           namespace: 'myapp'
           manifests: |
              ../../app-k8s-resources\app
          #  images: 'contoso.azurecr.io/myapp:${{ event.run_id }}'

        # - name: Setup kubectl
      #   id: install-kubectl
      #   uses: azure/setup-kubectl@v3

      


          
# name: IaC - Create AWS EKS Cluster with Terraform
# on:
#   workflow_dispatch:

# jobs:
#   install-requisites:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Validate Input Variable
#         run: |
#           if [[ "${{ github.event.inputs.cluster-name }}" =~ ^[a-z0-9\-]+$ && "${{ github.event.inputs.aws-region }}" =~ ^[a-z0-9\-]+$ ]]; then
#             echo "Input variables are valid. Continue with the workflow."
#           else
#             echo "Invalid input variables. Please use lowercase letters, numbers, and hyphens only."
#             exit 1
#           fi

#       - name: Install Terraform CLI
#         run: |
#           curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
#           echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
#           sudo apt-get update && sudo apt-get install terraform

#   create-aws-resources:
#     needs: install-requisites
#     runs-on: ubuntu-latest
#     env:
#       S3_BUCKET: "${{ github.event.inputs.cluster-name }}-bucket"
#       DYNAMODB_TABLE: "${{ github.event.inputs.cluster-name }}-dyndb"
#     permissions:
#       id-token: write
#       contents: read
    
#     steps:
#       - name: Checkout AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ github.event.inputs.aws-region }}

#       - name: Create S3 Bucket with versioning
#         run: |
#           if ! aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>&1 | grep -q 'NoSuchBucket'; then
#             echo "Bucket already exists"
#           else
#             aws s3 mb "s3://${{ env.S3_BUCKET }}" --region ${{ github.event.inputs.aws-region }}
#             aws s3api put-bucket-versioning --bucket "${{ env.S3_BUCKET }}" --versioning-configuration Status=Enabled
#           fi

#       - name: Create DynamoDB Table
#         run: |
#           if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE }} >/dev/null 2>&1; then
#             echo "Table already exists"
#           else
#             aws dynamodb create-table --table-name ${{ env.DYNAMODB_TABLE }} \
#               --attribute-definitions AttributeName=LockID,AttributeType=S \
#               --key-schema AttributeName=LockID,KeyType=HASH \
#               --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
#           fi

#   deploy-eks-terraform:
#     needs: create-aws-resources
#     runs-on: ubuntu-latest
#     env:
#       S3_BUCKET: "${{ github.event.inputs.cluster-name }}-bucket"
#       DYNAMODB_TABLE: "${{ github.event.inputs.cluster-name }}-dyndb"
#     steps:
#       - name: Checkout AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ github.event.inputs.aws-region }}

#       - name: Fetching terraform directory from repository
#         uses: actions/checkout@v3
#         with:
#           sparse-checkout: |
#             terraform/

#       - name: Prepare backend configuration for Terraform init
#         working-directory: terraform/
#         run: |
#           echo "bucket = \"${{ env.S3_BUCKET }}\"" >> backend-init.conf
#           echo "key = \"terraform.tfstate\"" >> backend-init.conf
#           echo "region = \"${{ github.event.inputs.aws-region }}\"" >> backend-init.conf
#           echo "dynamodb_table = \"${{ env.DYNAMODB_TABLE }}\"" >> backend-init.conf
#           cat backend-init.conf

#       - name: Initialize Terraform
#         working-directory: terraform/
#         run: |
#           terraform init -backend-config=backend-init.conf
#           if terraform workspace select "${{ github.event.inputs.cluster-name }}"; then
#             echo "Terraform workspace exists. Selecting "${{ github.event.inputs.cluster-name }}" workspace."
#           else
#             echo "Terraform workspace does not exist. Creating a new workspace."
#             terraform workspace new "${{ github.event.inputs.cluster-name }}"
#           fi

#       - name: Prepare vars for Terraform plan
#         working-directory: terraform/
#         run: |
#           echo "cluster_name = \"${{ github.event.inputs.cluster-name }}\"" >> terraform.auto.tfvars
#           echo "aws_region = \"${{ github.event.inputs.aws-region }}\"" >> terraform.auto.tfvars
#           echo "aws_access_key = \"${{ secrets.AWS_ACCESS_KEY }}\"" >> terraform.auto.tfvars
#           echo "aws_secret_key = \"${{ secrets.AWS_SECRET_KEY }}\"" >> terraform.auto.tfvars
#           echo "access_ip = \"${{ secrets.EKS_ACCESS_IP }}\"" >> terraform.auto.tfvars 
#           cat terraform.auto.tfvars

#       - name: Create Terraform plan
#         working-directory: terraform/
#         run: |
#           terraform plan -var-file=terraform.auto.tfvars -out "${{ github.event.inputs.cluster-name }}.tfplan"

#       - name: Terraform Apply
#         working-directory: terraform/
#         run: |
#           terraform apply ${{ github.event.inputs.cluster-name }}.tfplan