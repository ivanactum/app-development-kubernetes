name: IaC - Destroy AWS EKS Cluster with Terraform
on:
  workflow_dispatch:
    inputs:
      cluster-name:
        description: 'EKS Cluster Name'
        required: true
      aws-region:
        description: 'AWS region for deployment'
        required: true

jobs:
  install-requisites:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Input Variable
        run: |
          if [[ "${{ github.event.inputs.cluster-name }}" =~ ^[a-z0-9\-]+$ && "${{ github.event.inputs.aws-region }}" =~ ^[a-z0-9\-]+$ ]]; then
            echo "Input variables are valid. Continue with the workflow."
          else
            echo "Invalid input variables. Please use lowercase letters, numbers, and hyphens only."
            exit 1
          fi

      - name: Added Terraform and Kubectl repositories CLI
        run: |
          sudo apt-get update && sudo apt-get install -y ca-certificates curl     
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

      - name: Install Terraform and kubectl CLI
        run: |
          sudo apt-get install -y ca-certificates curl
          sudo apt-get update && sudo apt-get install terraform kubectl -y

  destroy-eks-terraform:
    needs: install-requisites
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: "${{ github.event.inputs.cluster-name }}-bucket"
      DYNAMODB_TABLE: "${{ github.event.inputs.cluster-name }}-dyndb"
    steps:
      - name: Checkout AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws-region }}

      - name: Remove application-vote argocd application
        run: |
          aws eks --region ${{ github.event.inputs.aws-region }} update-kubeconfig --name ${{ github.event.inputs.cluster-name }}
          kubectl delete namespace application-vote
          kubectl delete namespace argocd

      - name: Fetching terraform directory from repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform/

      - name: Prepare backend configuration for Terraform init
        working-directory: terraform/
        run: |
          echo "bucket = \"${{ env.S3_BUCKET }}\"" >> backend-init.conf
          echo "key = \"terraform.tfstate\"" >> backend-init.conf
          echo "region = \"${{ github.event.inputs.aws-region }}\"" >> backend-init.conf
          echo "dynamodb_table = \"${{ env.DYNAMODB_TABLE }}\"" >> backend-init.conf
          cat backend-init.conf

      - name: Initialize Terraform
        working-directory: terraform/
        run: |
          terraform init -backend-config="backend-init.conf"
          terraform workspace select ${{ github.event.inputs.cluster-name }}

      - name: Prepare vars for Terraform plan
        working-directory: terraform/
        run: |
          echo "cluster_name = \"${{ github.event.inputs.cluster-name }}\"" >> terraform.auto.tfvars
          echo "aws_region = \"${{ github.event.inputs.aws-region }}\"" >> terraform.auto.tfvars
          echo "aws_access_key = \"${{ secrets.AWS_ACCESS_KEY }}\"" >> terraform.auto.tfvars
          echo "aws_secret_key = \"${{ secrets.AWS_SECRET_KEY }}\"" >> terraform.auto.tfvars
          echo "access_ip = \"${{ secrets.EKS_ACCESS_IP }}\"" >> terraform.auto.tfvars 
          cat terraform.auto.tfvars

      - name: Create Terraform plan
        working-directory: terraform/
        run: |
          terraform plan -destroy -var-file=terraform.auto.tfvars -out "destroy-${{ github.event.inputs.cluster-name }}.tfplan"

      - name: Terraform Apply
        working-directory: terraform/
        run: |
          terraform apply destroy-${{ github.event.inputs.cluster-name }}.tfplan

  send-job-information:
    needs: destroy-eks-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Fetching terraform directory from repository
        uses: actions/checkout@v3

      - name: Notify discord channel
        uses: sebastianpopp/discord-action@releases/v2
        with:
          webhook: ${{ secrets.DISCORD_INFRA_WEBHOOK_URL }}
          message: |
            **Action:** EKS Cluster "${{ github.event.inputs.cluster-name }}" destroyed in "${{ github.event.inputs.aws-region }}"!!
            **Triggered by:** ${{ github.actor }}
            **Action URL:** [View Job](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})